---
description: 
globs: 
alwaysApply: true
---
**Security**

- Validate **all** inputs rigorously using Zod on tRPC procedures (server-side). Client-side validation is for UX, not security.
- Use tRPC middleware or `protectedProcedure` for authentication and authorization checks based on `ctx.session` (derived from Supabase Auth). Ensure authorization logic checks ownership or roles appropriately for accessing/modifying data.
- Implement rate limiting on tRPC procedures or API routes where necessary (e.g., using Upstash or similar middleware) to prevent abuse.
- Sanitize outputs only if rendering user-generated content directly as HTML without React's protection (generally avoid this). Rely on React's default XSS protection.
- Implement proper CORS policies via Next.js config if exposing APIs beyond the Next.js app itself.
- Use security-focused HTTP headers (e.g., Content-Security-Policy, Strict-Transport-Security) configured in `next.config.js` or via middleware.
- Use Supabase's built-in authentication securely. Implement Row Level Security (RLS) policies in Supabase for **all** tables containing user or workspace data as a critical defense-in-depth security layer, enforcing multi-tenancy and ownership checks at the database level.
- Follow OWASP Top 10 security best practices during development.

- Store sensitive information (API keys, secrets) securely using environment variables (`.env.local`, Vercel env vars, etc.) and access them **server-side only**.

# Security Checklist

## Configuration Security
- [x] Detect secrets in code
- [x] Identify secrets committed to version control
- [x] Flag hardcoded credentials

## Authentication & Authorization
- [x] Identify missing authentication checks
- [x] Detect improper authorization patterns
- [x] Flag violations of principle of least privilege

## Data Protection
- [x] Identify unencrypted sensitive data
- [x] Detect missing input validation
- [x] Find XSS vulnerabilities through missing output encoding
- [x] Identify SQL injection vulnerabilities

## API Security
- [x] Detect missing rate limiting
- [x] Identify improper error handling that leaks information
- [x] Find missing input validation in API endpoints

## Logging & Monitoring
- [x] Identify sensitive information in logs
- [x] Detect missing error logging

## Dependency Management
- [x] Flag outdated dependencies with known vulnerabilities
- [x] Identify excessive dependencies that increase attack surface

## Resilience & Availability
- [x] Detect missing error handling
- [x] Identify potential DoS vulnerabilities
- [x] Find missing timeout configurations

## SDLC Security
- [x] Identify common security issues through static analysis

- [x] Suggest security improvements in code reviews